apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
//apply plugin: 'com.android.databinding'


Properties props = new Properties()
try {
    props.load(file('private.properties').newDataInputStream())
} catch (Exception ex) {
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "nl.endran.scrumpoker"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 6
        versionName "0.5 (${getDetails()})"
    }

    signingConfigs {
        release {
            storeFile project.rootProject.file('keystore.jks')
            storePassword props.getProperty("storePassword")
            keyAlias props.getProperty("keyAlias")
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    jcenter()
    maven { url "https://maven.fabric.io/repo" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:cardview-v7:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'

    compile 'com.google.android.gms:play-services-analytics:8.1.0'
    compile 'com.google.android.gms:play-services-ads:8.1.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

    compile "uk.co.chrisjenx:calligraphy:2.1.0@aar"

//    // Dagger
//    compile "com.google.dagger:dagger:2.0.1"
//    apt "com.google.dagger:dagger-compiler:2.0.1"
//    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile "com.jakewharton:butterknife:7.0.1"

    compile("de.psdev.licensesdialog:licensesdialog:1.8.0") {
        exclude module: 'support-v4'
    }

    debugCompile "com.facebook.stetho:stetho:1.2.0"
    debugCompile "com.facebook.stetho:stetho-urlconnection:1.2.0"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-all:1.10.17"
    testCompile("com.squareup.assertj:assertj-android:1.1.1") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    testCompile("org.robolectric:robolectric:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile("org.robolectric:shadows-support-v4:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}


def getDetails() {
    def details = """git rev-parse --short HEAD""".execute().text.trim()
    def workingBranch = """git rev-parse --abbrev-ref HEAD""".execute().text.trim()
    return details + ' ' + workingBranch
}